---
title: "Week 3: Data science with the tidyverse"
subtitle: ""
author: "<large>Charlotte Hadley</large>"
format: 
  revealjs:
    theme: "css/lecture-styles.scss"
    slide-number: "c/t"
bibliography: "../bibtex-file.bib"
csl: "../nature.csl"
cache: true
echo: true
freeze: true
self-contained: true
---

## Topics for today

```{r}
#| echo: false
library(tidyverse)
library(gt)
library(readxl)
library(janitor)
library(haven)
library(naniar)
library(gapminder)
```

1. Understanding `data.frame` and `tibble`

2. Using `{readr}` for reading data

3. Using `{dplyr}` for cleaning and wrangling data

4. Using `{ggplot2}` for some basic exploratory data analysis

-----------

## What is the tidyverse?  {background-color="#23241F" .center .center-x}

-----------

## The tidyverse is two things

:::: {.columns}

::: {.column width="48%" .fragment .fade-in-then-semi-out fragment-index=1}

- A collection of packages that are designed to work together really well.

- A collection of packages for all stages of the data science workflow.

<center>
<img src='images/r4ds_data-science-workflow.png'/>
Source: [R for Data Science](https://r4ds.had.co.nz/)[@wickham_r_2016]
</center>

:::

::: {.column width="4%"}

:::

::: {.column width="48%" .fragment fragment-index=2}


- An opinionated framework for how to work with data.

Some people[@matloff_teaching_2022] would describe the tidyverse as being an alternative to using base R.

It's not. 

The tidyverse is a useful approach to working with data that has a large ecosystem of tools. We'll use it to move quickly.

:::

::::

::: {.fragment fragment-index=2}

> After we've been using the tidyverse for a while I'll come back to this subject and provide further context.

:::

-----------

## `r emo::ji("memo")` Task: Create a week-3 project {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 1 OF 1</p>

1. Create a new RStudio project called something like `week-3`.

-----------

## Installing and working with the tidyverse

To install the tidyverse collection of packages you need to run this code in the console.

```{r, eval=FALSE}
install.packages("tidyverse")
```

<br>

The tidyverse packages are split into two groups:

:::: {.columns}

::: {.column width="48%"}

- Core tidyverse packages which are loaded with this code

```{r}
library(tidyverse)
```

:::

::: {.column width="4%"}

:::

::: {.column width="48%" .fragment}

- "Specialised" packages that need to be explicitly loaded, like `{readxl}` for importing data from Excel files.

```{r}
library(tidyverse)
library(readxl)
```

:::

::::

-----------

## Updating the tidyverse (I)

In terms of real-world usage, keeping the tidyverse up to date is identical to keeping any R package up to date.

Thee

- When installing a *new* package the console might prompt you to update to new versions of packages

<center>
<img src='images/week-3/pkg-install-needs-updates.jpg' width='600px'/>
<center>

-----------

## Updating the tidyverse (II)

In terms of real-world usage, keeping the tidyverse up to date is identical to keeping any R package up to date.

There are 3 different ways you might discover you should update a package.


- When installing a *new* package the console might prompt you to update to new versions of packages.

::: {.incremental}

- When installing a *new* package the install fails due to an old package.

- You hear about an exciting new update to a package.

:::

<div class="fragment">

> There is a `tidyverse::tidyverse_update()` function but in practice I think it's very rarely used.

</div>

-----------

## Datasets we'll be using today (I)

We're going to be using at least 3 different datasets today:

- The Global Burden of Disease study from the [Global Health Data Exchange](https://vizhub.healthdata.org/gbd-results)[@global_health_data_exchange_global_2022].

The Global Burden of Disease study is an extremely useful and rich dataset for understanding global (and comparative) health challenges.

There's an [excellent interactive tool for downloading data from the survey](https://vizhub.healthdata.org/gbd-results/) - but you do need to register for a free account to use it.

-----------

## Datasets we'll be using today (II)

We're going to be using at least 3 different datasets today:

::: {.de-emphasis}
- The Global Burden of Disease study from the [Global Health Data Exchange](https://vizhub.healthdata.org/gbd-results)[@global_health_data_exchange_global_2022].
:::
- The `msleep` dataset from within the `{ggplot2}` package

:::: {.columns}

::: {.column width="48%"}

Lots (and lots) of R packages have datasets built into them, usually to demonstrate how to use functions inside the package.

The `msleep` dataset has data about mammalian sleep cycles from Savage and West[@savage_quantitative_2007]

:::

::: {.column width="4%"}

:::

::: {.column width="48%"}

```{r}
glimpse(msleep)
```

:::

::::

-----------

## Datasets we'll be using today (III)

We're going to be using at least 3 different datasets today:

::: {.de-emphasis}

- The Global Burden of Disease study from the [Global Health Data Exchange](https://vizhub.healthdata.org/gbd-results)[@global_health_data_exchange_global_2022].

- The `msleep` dataset from within the `{ggplot2}` package

:::

- The `gapminder` dataset from the `{gapminder}` package

:::: {.columns}

::: {.column width="48%"}

In 2006 Hans Rosling[@hans_rosling_best_2006] gave [an incredible TED talk where he introduced animated bubble charts](https://www.ted.com/talks/hans_rosling_the_best_stats_you_ve_ever_seen?language=en) as a tool to tell stories about global development.

Hans Rosling also founded the Gapminder Foundation to promote sustainable global development.

The `{gapminder}` package contains a subset of their data.

:::

::: {.column width="4%"}

:::

::: {.column width="48%"}

<a href='https://r-graph-gallery.com/271-ggplot2-animated-gif-chart-with-gganimate.html'><img src='images/week-3/gapminder-bubble-chart.png'/></a>
:::

::::

# msleep {background-color="#23241F" .center .center-x}

-----------

## `r emo::ji("memo")` Task: Get the msleep dataset {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 1 OF 1</p>


1. Add a heading for the msleep dataset.

1. Load the `{tidyverse}` package in the setup code chunk

1. Add a new code chunk and print the object `msleep` to the console

```{r, eval=FALSE}
msleep
```


-----------

## Understanding our object

The datasets embedded into `{tidyverse}` packages and those generated by reading in data files with {readr}, {readxl} and {haven} are objects known as "tibbles".

It's important to understand how this relates to and is different from `data.frame`.

-----------

### data.frames (I)

The `data.frame` is R's general purpose rectangular data store, it's therefore the data structure required to build `{ggplot2}` charts.

The `{datasets}` package has a number of built-in `data.frames`, for instance:

```{r}
head(quakes)
```

The `class()` function is the way to determine what type of *thing*/*object* you're working with:

```{r}
class(quakes)
```

-----------

### data.frames (II)

Because they're rectangular, `data.frames` have rows and columns which we can extract separately.

We can print the dimensions of a `data.frame` with `dim()`

```{r}
dim(quakes)
```

In Base R there are two ways to extract columns:


:::: {.columns}

::: {.column width='48%'}

- The **$** operator allows us to extract columns via their name, with autocompletion:

```{r, eval=FALSE}
quakes$mag
```

:::

::: {.column width='4%'}
:::

::: {.column width='48%'}

- The more flexible **&#91;** operator allows us to extract both rows and columns, including by their index

```{r,eval=FALSE}
quakes[, "mag"]
```

```{r,eval=FALSE}
quakes[, 1]
```


:::

::::

-----------

### data.frame is dead, long live tibble... (I)

The `tidyverse` introduces an augmented `data.frame`, called a `tibble`. 

Let's demonstrate the differences after loading the `tidyverse`.

```{r echo=TRUE, message=FALSE, warning=FALSE}
library("tidyverse")
```

The first thing we notice about a `tibble` is that it prints differently to the console:

:::: {.columns}

::: {.column width='48%'}
```{r}
quakes
```
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}

```{r}
starwars
```
:::

::::


-----------

### data.frame is dead, long live tibble... (II)

In this course we're not going to use the `$` or `[` operators for extracting columns from a `data.frame` or `tibble`.

The `{dplyr}` provides the extremely flexible `select()` function:

:::: {.columns}

::: {.column width='48%'}
```{r}
select(quakes, mag)
```
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
select(starwars, name)
```
:::

::::

-----------

### data.frame is dead, long live tibble... (III)

The `select()` function returns a `data.frame` or `tibble`, but sometimes *we need a vector*.

A vector is a one-dimensional atomic object... we usually come across them via the `c()` function:

```{r}
c(1, "2", 3)
```

If we want to extract a column from a `tibble` as a vector, we need to use `pull()`:

```{r}
pull(starwars, name)
```

-----------

## Exploring our dataset

Let's get to grips with our dataset. 

How many animals do we have for each diet type?

We can calculate this using the `count()` function

```{r}
#| echo: true
count(msleep, vore)
```

-----------

## count documentation

If we consult the documentation for an explanation of `count()`, we're introduced to this beast:

> %>%

```{r}
#| eval=FALSE
starwars %>%
 count(species, homeworld, sort = TRUE)
```

The code we will use to split the `start.location` column also uses `%>%`

```{r}
#| eval=FALSE
bechdel %>%
  count(binary)
```

Let's address what `%>%` does...

-----------

## Little Bunny Foo Foo

To introduce pipes, we're going to borrow an example from [Hadley Wickham](https://twitter.com/AmeliaMN/status/748193609401327616):

*How can we convert this poem into code?*

> Little bunny Foo Foo
>
> Went hopping through the forest
>
> Scooping up the field mice
>
> And bopping them on the head

-----------

## Coding up little bunny foo foo

> Little bunny Foo Foo </br>
> Went hopping through the forest </br>
> Scooping up the field mice </br>
> And bopping them on the head </br>

Let's create an instance of a bunny called `foo_foo`

```{r}
#| eval=FALSE
foo_foo <- little_bunny()
```

Now let's write the poem out as code:

```{r}
#| eval=FALSE
bop_on(
  scoop_up(
    hop_through(foo_foo, forest),
    field_mouse
  ),
  head
)
```

-----------

## Understanding our code

In order to understand what our code does, we need to parse it:

- Find the deepest expression (the first thing that happens)

- Work backwards (or up) the code

```{r}
#| eval=FALSE
bop_on(
  scoop_up(
   hop_through(foo_foo, forest),
    field_mouse
  ),
  head
)
```

This is exactly counter to the order of operations in the original poem.

-----------

## Piping little bunny foo foo

Let's instantiate a bunny called `foo_foo`

```{r}
#| eval=FALSE
foo_foo <- little_bunny()
```

Now write the same code as before but using pipes:

```{r}
#| eval=FALSE
foo_foo %>%
  hop_through(forest) %>%
  scoop_up(field_mouse) %>%
  bop_on(head)
```

The order we read operations is exactly the same as the order in which the operations happen!

-----------

## Comparing the two

Independent of pipes, we create ourselves a little bunny:

```{r}
#| eval=FALSE
foo_foo <- little_bunny()
```

Now comparing the two code samples, the one with pipes is easier to parse by eye.

:::: {.columns}

::: {.column width='48%'}
```{r}
#| eval=FALSE
bop_on(
  scoop_up(
    hop_through(foo_foo, forest),
    field_mouse
  ),
  head
)
```
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
#| eval=FALSE
foo_foo %>%
  hop_through(forest) %>%
  scoop_up(field_mouse) %>%
  bop_on(head)
```
:::

::::

> Admitedly, this doesn't explain what `%>%` actually does!

-----------

## Simpler %>% example

The pipe operator takes the left-hand side of your expression and inserts it into the first argument of the right-hand side of the expression:

```{r, eval = FALSE}
"cats" %>% rep(4)
```

::: {.fragment}

There's nothing special about `rep`, it's `%>%` which is doing the work.

`%>%` is an example of what's called **syntactic sugar** it makes code easier to write/read.

:::

-----------

## Pushing the pipe further

In some cases you don't want the left-hand side in the first argument, you can explicitly shove it somewhere else by using a period `.`

```{r, eval = FALSE}
"cats" %>% paste(., "are great", "but one can have too many", .)
```

-----------

## Where does `%>%` come from?

`magrittr` is the package that gives us `%>%`, it was first introduced in 2014 and since then has become ridiculously popular.

The pipe is now an intrinsic part of the `tidyverse` and made available to us when we load it.

If you want to use %>% in your own packages, then consider using the [usethis package](https://github.com/r-lib)

```{r, eval=FALSE}
usethis::use_pipe()
```

-----------

## Advice on using `%>%`

The pipe isn't a hammer to be used without exception, some code is both harder to write and read with pipes.

Try to break pipe chains into blocks of similar operatios to make your code easier to understand at a glance:

```{r, eval=FALSE}
raw_data <- read_csv("data-raw/the-file.csv")

clean_data <- raw_data %>%
  clean() %>%
  clean_it() %>%
  cleaning() %>%
  cleaned()

clean_data <- clean_data %>%
  normalise() %>%
  normaler() %>%
  norm_it()
```

-----------

## What if I hate `%>%`?

It's perfectly acceptable to hate `%>%`. 

That's fine. 

It's just sugar to sweeten the already lovely R.

<br>
<br>

However, you need a basic understanding of it to read most documentation pages in the `tidyverse` (and beyond).

-----------

## Hierarchical counting

We can count by as many attributes as we like:

```{r}
msleep %>% 
  count(order, vore, sort = TRUE)
```

-----------

## Is there any missing data? (I)

The `filter()` function allows us to query a dataset:

```{r, eval=FALSE}
msleep %>%
  filter(sleep_total > 12)
```

We use `==` for equivalence tests:

```{r, eval=FALSE}
msleep %>%
  filter(vore == "carni")
```

We can negate conditions in two different ways:

:::: {.columns}

::: {.column width='48%'}
```{r}
#| eval: false
msleep %>%
  filter(vore != "carni")
```

:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
#| eval: false
msleep %>%
  filter(!vore == "carni")
```
:::

::::

-----------

## Is there any missing data? (II)

We can't use an equivalence test to filter for `NA` values, instead we need to use `is.na()`:

```{r,eval=FALSE}
msleep %>%
  filter(is.na(conservation))
```

The `drop_na()` function returns only those rows containing zero `NA` values:

```{r, eval=FALSE}
msleep %>%
  drop_na()
```

-----------

## {naniar} and {ggplot2} (I)

We're going to introduce {ggplot2} today which allows us to build data visualisations from scratch.

<br>

There are lots of packages that *extend* the capabilities of {ggplot2}.

:::: {.columns}

::: {.column width='48%'}
Some of these packages provide additional **geoms** to help you build up charts.
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
Some of these packages provide ready made data visualisations!

{naniar} is an example of this
:::

::::

-----------

## {naniar} and {ggplot2} (II)

1. Install and load the {naniar} package

1. Run this code:

```{r}
msleep %>% 
  gg_miss_upset()
```

-----------

## Making our own data visualisations

We're going to make two different types of dataviz with the {msleep} dataset:

- Scatter plot of sleep_rem vs sleep_total

- Bar chart of mean sleep_total per vore

-----------

## sleep_rem scatter plot: ggplot()

We start ggplot2 charts by providing a dataset to the ggplot() function

```{r}
msleep %>% 
  ggplot()
```

This creates an infamous grey rectangle. We need to provide more information to {ggplot2} so it can create a meaningful dataviz.

-----------

## sleep_rem scatter plot: aes()

We need to tell {ggplot2} how to map columns in our dataset to coordinate systems in the chart.

We do this with the aes() function. There are two different ways we can write this in two different ways:

:::: {.columns}

::: {.column width='48%'}
```{r}
msleep %>% 
  ggplot(aes(x = sleep_rem,
             y = sleep_total))
```

:::

::: {.column width='4%'}
:::

::: {.column width='48%'}

```{r}
msleep %>% 
  ggplot() +
  aes(x = sleep_rem,
      y = sleep_total)
```

:::

::::

- {ggplot2} uses the columns to create new **scales** in the chart. As both columns are numeric we get an x and y continuous scale.

- The {tidyverse} functions are written specially to allow us to provide "naked" or "bare" column names<a href='https://twitter.com/charliejhadley/status/1576548920347410433?s=20&t=fn7BA_uqTHVVrqh0WbRjjw'><sup>a</sup></a> thanks to [tidy evaluation](https://dplyr.tidyverse.org/articles/programming.html).

-----------

## sleep_rem scatter plot: geom_point()

We now add geoms to our charts. These use the aesthetic mappings to add geometric shapes to our chart.

- {ggplot2} was invented **before** the pipe existed so we use `+` to add layers to the chart.

```{r}
msleep %>% 
  ggplot() +
  aes(x = sleep_rem,
      y = sleep_total) +
  geom_point()
```

-----------

## sleep_rem scatter plot: improving

This is a pretty useless chart. It doesn't tell any stories and is almost useless.

> What can we do to improve the chart?

-----------

## sleep_rem bar chart: calculating (I)

Before we can create a bar chart of the mean sleep time per diet we need to calculate these values!

This means introducing the `group_by()` function for calculating in-group measures.

:::: {.columns}

::: {.column width='40%'}
1. Add groups to data

::: {.de-emphasis}

2\. Calculate in group measures

13\ Ungroup the data when finished.

:::

:::

::: {.column width='60%'}
```{r}
msleep %>% 
  group_by(vore)
```
:::

::::

-----------

## sleep_rem bar chart: calculating (II)

Before we can create a bar chart of the mean sleep time per diet we need to calculate these values!

This means introducing the `group_by()` function for calculating in-group measures.

:::: {.columns}

::: {.column width='40%'}

::: {.de-emphasis}

1. Add groups to data

:::

2\. Calculate in group measures

- mutate() leaves all rows

::: {.de-emphasis}

3\. Ungroup the data when finished.

:::

:::

::: {.column width='60%'}
```{r}
msleep %>% 
  group_by(vore) %>% 
  mutate(mean_sleep_total = mean(sleep_total))
```
:::

::::

-----------

## sleep_rem bar chart: calculating (III)

Before we can create a bar chart of the mean sleep time per diet we need to calculate these values!

This means introducing the `group_by()` function for calculating in-group measures.

:::: {.columns}

::: {.column width='40%'}

::: {.de-emphasis}

1. Add groups to data

:::

2\. Calculate in group measures

- mutate() leaves all rows and columns

- group_by() throws away columns

::: {.de-emphasis}

3\. Ungroup the data when finished.

:::

:::

::: {.column width='60%'}
```{r}
msleep %>% 
  group_by(vore) %>% 
  summarise(mean_sleep_total = mean(sleep_total))
```
:::

::::

-----------

## sleep_rem bar chart: calculating (IV)

Before we can create a bar chart of the mean sleep time per diet we need to calculate these values!

This means introducing the `group_by()` function for calculating in-group measures.

:::: {.columns}

::: {.column width='40%'}

::: {.de-emphasis}

1. Add groups to data

2\. Calculate in group measures

- mutate() leaves all rows and columns

- group_by() throws away columns

:::

3\. Ungroup the data when finished.

:::

::: {.column width='60%'}
```{r}
msleep %>% 
  group_by(vore) %>% 
  summarise(mean_sleep_total = mean(sleep_total)) %>% 
  ungroup()
```
:::

::::

-----------

## sleep_rem bar chart: calculating (V)

Before we can create a bar chart of the mean sleep time per diet we need to calculate these values!

This means introducing the `group_by()` function for calculating in-group measures.

:::: {.columns .de-emphasis}

::: {.column width='40%'}

::: {.de-emphasis}

1. Add groups to data

2\. Calculate in group measures

- mutate() leaves all rows and columns

- group_by() throws away columns

:::

3\. Ungroup the data when finished.

:::

::: {.column width='60%'}
```{r}
msleep %>% 
  group_by(vore) %>% 
  summarise(mean_sleep_total = mean(sleep_total)) %>% 
  ungroup()
```
:::

::::

:::: {.columns}

::: {.column width='40%'}

**Don't forget to make an assignment for this useful subset/analysis of the dataset**

:::

::: {.column width='60%'}
```{r}
mean_sleep_by_vore <- msleep %>% 
  group_by(vore) %>% 
  summarise(mean_sleep_total = mean(sleep_total)) %>% 
  ungroup()
```
:::

::::

-----------

## sleep_rem bar chart: Charting (I)

Please setup a {ggplot2} with the following specifications:

- x axis should be the "mean_sleep_total" column

- y axis should be the "vore" column

-----------

## sleep_rem bar chart: Charting (II)

```{r}
mean_sleep_by_vore %>% 
  ggplot() +
  aes(x = mean_sleep_total,
      y = vore) +
  geom_col()
```

> How can we improve this chart?!

-----------

## sleep_rem bar chart: Ordering (I)

:::: {.columns}

::: {.column width='40%'}
```{r}
#| echo: false
mean_sleep_by_vore %>% 
  ggplot() +
  aes(x = mean_sleep_total,
      y = vore) +
  geom_col()
```
:::

::: {.column width='60%'}
This chart is confusing to read because of the order bars are shown.

{ggplot2} uses information in the column to decide the order of scales.

- In the case of `chr` (character) columns alphabetical ordering is used

- In the case of `fct` (factor) columns are ordered by the levels in the factor.

> We're going to come back to factors in the data visualisation week.
:::

::::

-----------

## Mutating multiple columns (I)

Often we need to target multiple columns at once. For instance, it could be useful to convert all `sleep*` columns in the dataset to fractions of a day.

This is achieved with the `across()` function

<br>

:::: {.columns}

::: {.column width='60%'}
The across() function takes 2 arguments.
:::

::: {.column width='40%'}
```{r}
#| eval: false
msleep %>% 
  mutate(across(argument_1, argument_2))
```

:::

::::

-----------

## Mutating multiple columns (II)

Often we need to target multiple columns at once. For instance, it could be useful to convert all `sleep*` columns in the dataset to fractions of a day.

This is achieved with the `across()` function

<br>

:::: {.columns}

::: {.column width='60%'}
The first argument is how we target specific columns.

This is achieved with a [tidy-select](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html) function.
:::

::: {.column width='40%'}
```{r}
#| eval: false
msleep %>% 
  mutate(across(argument_1, argument_2))
```

<br>

<br>

```{r}
#| eval: false
msleep %>% 
  mutate(across(starts_with("sleep"), 
                argument_2))
```

:::

::::

-----------

## Mutating multiple columns (III)

Often we need to target multiple columns at once. For instance, it could be useful to convert all `sleep*` columns in the dataset to fractions of a day.

This is achieved with the `across()` function

<br>

:::: {.columns}

::: {.column width='60%'}
The 2nd argument is where we specify what happens to each column that's selected.

We need to write a function here.

<br>

That's **usually** achieved with the `~` shorthand

```{r}
#| eval: false
~ . / 24
```

:::

::: {.column width='40%'}
```{r}
#| eval: false
msleep %>% 
  mutate(across(argument_1, argument_2))
```

<br>

<br>

```{r}
#| eval: true
msleep %>% 
  mutate(across(starts_with("sleep"), 
                ~ . / 24))
```

:::

::::

-----------

## Mutating multiple columns (IV)

Often we need to target multiple columns at once. For instance, it could be useful to convert all `sleep*` columns in the dataset to fractions of a day.

This is achieved with the `across()` function

<br>

:::: {.columns .de-emphasis}

::: {.column width='60%'}
The 2nd argument is where we specify what happens to each column that's selected.

We need to write a function here.

<br>

That's **usually** achieved with the `~` shorthand

```{r}
#| eval: false
~ . / 24
```

:::

::: {.column width='40%'}
```{r}
#| eval: false
msleep %>% 
  mutate(across(argument_1, argument_2))
```

<br>

<br>

```{r}
#| eval: false
msleep %>% 
  mutate(across(starts_with("sleep"), 
                ~ . / 24))
```

:::

::::

<br>

All tidyverse wrangling is done "column-wise" unless you explicitly specify row-wise operations with the `rowwise()`. We'll see some examples of this during the course.

# gapminder {background-color="#23241F" .center .center-x}

-----------

## `r emo::ji("memo")` Task: Get the gapminder dataset {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 1 OF 3</p>


1. Add a heading for the gapminder dataset.

1. Load the `{gapminder}` package in the setup code chunk

1. Add a new code chunk and print the object `gapminder` to the console

```{r, eval=FALSE}
gapminder
```

-----------

## `r emo::ji("memo")` Task: gapminder scatter plot {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 2 OF 3</p>

:::: {.columns}

::: {.column width='48%'}
Create this scatter plot of the {gapminder} dataset for the year 2007.
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
#| echo: false
gapminder %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = lifeExp,
             y = gdpPercap,
             color = continent)) +
  geom_point() +
  theme_gray(base_size = 16)
```
:::

::::

-----------

## `r emo::ji("memo")` Task: gapminder barchart {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 3 OF 3</p>

:::: {.columns}

::: {.column width='48%'}
Create this bar chart of the {gapminder} dataset for the year 2007.
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
#| echo: false
gapminder %>% 
  filter(year == 2007) %>% 
  group_by(continent) %>% 
  summarise(median_gdp_per_cap = median(gdpPercap)) %>% 
  ggplot(aes(x = median_gdp_per_cap,
             y = continent)) +
  geom_col() +
  theme_gray(base_size = 16)
```
:::

::::

# GBD Dataset

-----------

## `r emo::ji("memo")` Task: Get the GBD dataset {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 1 OF 2</p>


1. Add a sub-folder to your project called `data`

1. Inside of the `data` folder add a script called `obtain-data.R`

1. Add this code

```{r, eval=FALSE}
download.file("https://raw.githubusercontent.com/charliejhadley/eng7218_data-science-for-healthcare-applications_bcu-masters/main/static/datasets/data-example_global-burden-of-disease/data-example_global-burden-of-disease.csv",
              destfile = "data/global-burden-of-disease-data.csv")
```

5\. Run the code

-----------

## `r emo::ji("memo")` Task: Get the GBD dataset {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 2 OF 2</p>

1. Add a new heading for the GBD Dataset to your .Rmd

-----------

## Reading data into R

The `{readr}` package provides excellent tools for reading *rectangular* data from *plain-text* files like `.csv` and `.tsv` files.

<br>

We need to think about creating reproducible file paths. The easiest way to do so is as follows:

<br>

::: {.incremental}

1. Add a code chunk to your `.Rmd`

1. Choose a name for the dataset you're importing, it's recommended to use `raw` or something similar to denote this is your data pre-wrangling.

    ```{verbatim}
    disease_burden_raw <- 
    ```

1. Call the appropriate function from `{readr}` for your data, add `""` in the 1st argument

   ```{r, eval=FALSE}
   disease_burden_raw <- read_csv("")
   ```

1. Press `TAB` with your cursor inside the quotation marks to bring up an interactive file tree and select your file.

   ```{r, eval=FALSE}
   disease_burden_raw <- read_csv("data/global-burden-of-disease-data.csv")
   ```

:::

-----------

## Matching text in R (I)

A lot of data wrangling comes down to filtering, matching or otherwise manipulating text. In computer science we usually call text "strings" but R is a bit different and uses the term "character".

```{r}
#| echo: false
#| eval: true
disease_burden_raw <- read_csv(here::here("static", "datasets", "data-example_global-burden-of-disease", "data-example_global-burden-of-disease.csv"))
```

:::: {.columns}

::: {.column width='48%'}
The GBD dataset gives us a good example of this.

There are two different types of region in the dataset

- World Bank regions

- Geographic regions
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
#| echo: true
disease_burden_raw %>% 
  count(location_name)
```
:::

::::

The tidyverse gives us an entire package called `{string}` for parsing/manipulating strings.

-----------

## Matching text in R (II)

:::: {.columns}

::: {.column width='48%'}
We can search the beginning of the strings with `str_starts()`.
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
#| echo: true
disease_burden_raw %>% 
  filter(str_starts(location_name, "World Bank"))
```
:::

::::

-----------

## Matching text in R (II)

:::: {.columns}

::: {.column width='48%'}
For more complex string matching we have to make use of REGEX.

REGEX stands for regular expressions and is an approach to string manipulation that is implemented in all programming languages.

<br>

We can use regular expressions in the `pattern` argument for all `{stringr}` functions.

<br>

[regex101.com](https://regex101.com/) is a really useful tool for building up complex regular expressions.
:::

::: {.column width='4%'}
:::

::: {.column width='48%'}
```{r}
#| echo: true
disease_burden_raw %>% 
  filter(str_detect(location_name, "^World Bank"))
```
:::

::::

-----------

## GBD data visualisation (I)

I'd like you to filter the dataset so that all of these are true:

- We can only see data for the most recent year

- We can see the **percent** of deaths for each cause_name

- There are 16 rows in the filtered dataset


-----------

## GBD data visualisation (II)

Once we've filtered down the data, let's select only the interesting columns:

```{r}
#| echo: false
#| eval: true
disease_burden_percent_deaths <- disease_burden_raw %>% 
  filter(str_detect(location_name, "^World Bank")) %>% 
  filter(year == max(year)) %>% 
  filter(metric_name == "Percent") %>% 
  filter(measure_name == "Deaths")
```

```{r}
disease_burden_percent_deaths %>% 
  select(location_name, cause_name, val)
```

Let's visualise this as a barchart

-----------

## GBD data visualisation (II)

> How can we make this chart more meaningful?

```{r}
#| output-location: column
disease_burden_percent_deaths %>% 
  select(location_name, cause_name, val) %>% 
  ggplot() +
  aes(x = val,
      y = location_name,
      fill = cause_name) +
  geom_col()
```


-----------

## Going further

:::: {.columns}

::: {.column width='48%'}
We've only barely scratched the surface of wrangling with the tidyverse. These are the topics we have covered:

- Read in data files with `read_*()` functions

- Understand the difference between `tibbles` and `data.frame`

- Filter datasets with `filter()`

- Use `{stringr}` to searh/modify strings

- Use `mutate()` to modify existing columns and add new columns

- Use `group_by()` to calculate in-group values

- Use `{ggplot2}` for exploratory data analysis.
:::

::: {.column width='4%'}
:::


::: {.column width='48%' .fragment}

- The [R for Data Sciene book](https://r4ds.had.co.nz/) is an excellent resource for reinforcing this content and moving on to more advanced topics.

- RStudio has a lot of really useful cheatsheets - <https://www.rstudio.com/resources/cheatsheets/>

- We'll get into the technical details of using `{ggplot2}` next lecture.

- In the "survey data" week we'll introduce the principles of tidy data and several functions from `{tidyr}` for wrangling datasets.

:::

::::




-----------

### References

::: {#refs}
:::

