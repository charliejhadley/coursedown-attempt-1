---
title: "Week 3: Data science with the tidyverse"
subtitle: ""
author: "<large>Charlotte Hadley</large>"
format: 
  revealjs:
    theme: "css/lecture-styles.scss"
    slide-number: "c/t"
bibliography: "../bibtex-file.bib"
csl: "../nature.csl"
cache: true
echo: true
freeze: true
---

## Topics for today

```{r}
library(tidyverse)
library(gt)
library(readxl)
library(janitor)
library(haven)
```

1. Understanding `data.frame` and `tibble`

2. Using `{readr}` for reading data

3. Using `{dplyr}` for cleaning and wrangling data

4. Using `{ggplot2}` for some basic exploratory data analysis

-----------

## What is the tidyverse?  {background-color="#23241F" .center .center-x}

-----------

## The tidyverse is two things

:::: {.columns}

::: {.column width="48%" .fragment .fade-in-then-semi-out fragment-index=1}

- A collection of packages that are designed to work together really well.

- A collection of packages for all stages of the data science workflow.

<center>
<img src='images/r4ds_data-science-workflow.png'/>
Source: [R for Data Science](https://r4ds.had.co.nz/)[@wickham_r_2016]
</center>

:::

::: {.column width="4%"}

:::

::: {.column width="48%" .fragment fragment-index=2}


- An opinionated framework for how to work with data.

Some people[@matloff_teaching_2022] would describe the tidyverse as being an alternative to using base R.

It's not. 

The tidyverse is a useful approach to working with data that has a large ecosystem of tools. We'll use it to move quickly.

:::

::::

::: {.fragment fragment-index=2}

> After we've been using the tidyverse for a while I'll come back to this subject and provide further context.

:::

-----------

## `r emo::ji("memo")` Task: Create a week-3 project {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 1 OF 1</p>

1. Create a new RStudio project called something like `week-3`.

-----------

## Installing and working with the tidyverse

To install the tidyverse collection of packages you need to run this code in the console.

```{r, eval=FALSE}
install.packages("tidyverse")
```

<br>

The tidyverse packages are split into two groups:

:::: {.columns}

::: {.column width="48%"}

- Core tidyverse packages which are loaded with this code

```{r}
library(tidyverse)
```

:::

::: {.column width="4%"}

:::

::: {.column width="48%" .fragment}

- "Specialised" packages that need to be explicitly loaded, like `{readxl}` for importing data from Excel files.

```{r}
library(tidyverse)
library(readxl)
```

:::

::::

-----------

## Updating the tidyverse (I)

In terms of real-world usage, keeping the tidyverse up to date is identical to keeping any R package up to date.

Thee

- When installing a *new* package the console might prompt you to update to new versions of packages

<center>
<img src='images/week-3/pkg-install-needs-updates.jpg' width='600px'/>
<center>

-----------

## Updating the tidyverse (II)

In terms of real-world usage, keeping the tidyverse up to date is identical to keeping any R package up to date.

There are 3 different ways you might discover you should update a package.


- When installing a *new* package the console might prompt you to update to new versions of packages.

::: {.incremental}

- When installing a *new* package the install fails due to an old package.

- You hear about an exciting new update to a package.

:::

<div class="fragment">

> There is a `tidyverse::tidyverse_update()` function but in practice I think it's very rarely used.

</div>

-----------

## Datasets we'll be using today (I)

We're going to be using at least 3 different datasets today:

- The Global Burden of Disease study from the [Global Health Data Exchange](https://vizhub.healthdata.org/gbd-results)[@global_health_data_exchange_global_2022].

The Global Burden of Disease study is an extremely useful and rich dataset for understanding global (and comparative) health challenges.

There's an [excellent interactive tool for downloading data from the survey](https://vizhub.healthdata.org/gbd-results/) - but you do need to register for a free account to use it.

-----------

## Datasets we'll be using today (II)

We're going to be using at least 3 different datasets today:

::: {.de-emphasis}
- The Global Burden of Disease study from the [Global Health Data Exchange](https://vizhub.healthdata.org/gbd-results)[@global_health_data_exchange_global_2022].
:::
- The `msleep` dataset from within the `{ggplot2}` package

:::: {.columns}

::: {.column width="48%"}

Lots (and lots) of R packages have datasets built into them, usually to demonstrate how to use functions inside the package.

The `msleep` dataset has data about mammalian sleep cycles from Savage and West[@savage_quantitative_2007]

:::

::: {.column width="4%"}

:::

::: {.column width="48%"}

```{r}
glimpse(msleep)
```

:::

::::

-----------

## Datasets we'll be using today (III)

We're going to be using at least 3 different datasets today:

::: {.de-emphasis}

- The Global Burden of Disease study from the [Global Health Data Exchange](https://vizhub.healthdata.org/gbd-results)[@global_health_data_exchange_global_2022].

- The `msleep` dataset from within the `{ggplot2}` package

:::

- The `gapminder` dataset from the `{gapminder}` package

:::: {.columns}

::: {.column width="48%"}

In 2006 Hans Rosling[@hans_rosling_best_2006] gave [an incredible TED talk where he introduced animated bubble charts](https://www.ted.com/talks/hans_rosling_the_best_stats_you_ve_ever_seen?language=en) as a tool to tell stories about global development.

Hans Rosling also founded the Gapminder Foundation to promote sustainable global development.

The `{gapminder}` package contains a subset of their data.

:::

::: {.column width="4%"}

:::

::: {.column width="48%"}

<a href='https://r-graph-gallery.com/271-ggplot2-animated-gif-chart-with-gganimate.html'><img src='images/week-3/gapminder-bubble-chart.png'/></a>
:::

::::

-----------

## `r emo::ji("memo")` Task: Get the GBD dataset {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 1 OF 2</p>


1. Add a sub-folder to your project called `data`

1. Inside of the `data` folder add a script called `obtain-data.R`

1. Add this code

```{r, eval=FALSE}
download.file("https://raw.githubusercontent.com/charliejhadley/eng7218_data-science-for-healthcare-applications_bcu-masters/main/static/datasets/data-example_global-burden-of-disease/data-example_global-burden-of-disease.csv",
              destfile = "data/global-burden-of-disease-data.csv")
```

5\. Run the code

-----------

## `r emo::ji("memo")` Task: Get the GBD dataset {background-color="#def3f7"}
<p class='task-slide-count'>SLIDE 2 OF 2</p>

1. Add a new `.Rmd` document called something like `intro-to-tidyverse.Rmd`

1. Use this document to follow along with examples, make notes and run code.

> We're going to move between topics quite a bit today. This won't be a very neat document, and that's okay.

-----------

## Reading data into R

The `{readr}` package provides excellent tools for reading *rectangular* data from *plain-text* files like `.csv` and `.tsv` files.

<br>

We need to think about creating reproducible file paths. The easiest way to do so is as follows:

<br>

::: {.incremental}

1. Add a code chunk to your `.Rmd`

1. Choose a name for the dataset you're importing, it's recommended to use `raw` or something similar to denote this is your data pre-wrangling.

    ```{verbatim}
    disease_burden_raw <- 
    ```

1. Call the appropriate function from `{readr}` for your data, add `""` in the 1st argument

   ```{r, eval=FALSE}
   disease_burden_raw <- read_csv("")
   ```

1. Press `TAB` with your cursor inside the quotation marks to bring up an interactive file tree and select your file.

:::

-----------

---

XXX !!!!!! DRAGONS!!!!!! XXXX

# Things need to do

## Data Wrangling

- Read in datafiles

- Understand difference between data.frame and tibble

- Use count(msleep, vore)
  
  - Use this to introduce %>% and |>

- Introduce filter() and select()

  - Tidy select functions
  
- Introduce group_by()

  - In msleep calculate mean sleep by vore
  
  - In {gapminder} calculate mean life expectancy per continent
  
  - In GDB calculate total injury deaths per year when selecting by "World Bank" region
  
    - This is quite involved! There are 3 metrics.
  
    - Requires str_detect() for world bank

- Use tibble() and tribble() to make fake datasets

  - Used to create a survey dataset for rowwise(starts_with("pain_level"), ~mean(.x)))
    
- Talk about mutate() usually working with columns

  - across() allows us to work across multiple columns
  
  - rowwise() allows us to perform row-wise calculations
    
    (using the tribble dataset)
    
## Data visualisation for understanding data

- Show datasaurus and gapminder again

- Make a scatter plot

  - msleep dataset
  
  - 
  
- Make a bar chart
  
  - msleep dataset, explain we will cover FACTORS
  
  - geom_bar() vs geom_col()

  
## Exercises

Offer 3 different exercises:

- "Hypothesis test dataset" https://raw.githubusercontent.com/charliejhadley/eng7218_data-science-for-healthcare-applications_bcu-masters/main/static/datasets/hypothesis-dataset/hypothesis-data.txt

- Tidy tuesday

- Timeline chart: with GBD data

  - This takes a bunch of wrangling AND data visualisation code
  
```{r, eval=FALSE}
gbd_raw %>% 
  filter(str_detect(location_name, "Region"),
         metric_name == "Percent",
         cause_name != "All causes",
         measure_name == "Deaths") %>% 
  arrange(year,
          location_name) %>% 
  select(year,
         location_name,
         cause_name,
         val,
         everything()) %>% 
  ggplot() +
  aes(x = year,
      y = val,
      color = cause_name) +
  geom_line() +
  facet_wrap(~location_name) +
  scale_color_viridis_d(labels = function(x) str_wrap(x, width = 20)) +
  scale_y_continuous(limits = c(0, 1),
                     labels = scales::label_percent()) +
  theme_bw(base_size = 14) +
  theme(strip.text.y = element_text(angle = 0))
```

-----------

### References

::: {#refs}
:::

